package com.meet.singles.domain;

import static com.meet.singles.domain.AssertUtils.bigDecimalCompareTo;
import static com.meet.singles.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class EventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllPropertiesEquals(Event expected, Event actual) {
        assertEventAutoGeneratedPropertiesEquals(expected, actual);
        assertEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllUpdatablePropertiesEquals(Event expected, Event actual) {
        assertEventUpdatableFieldsEquals(expected, actual);
        assertEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAutoGeneratedPropertiesEquals(Event expected, Event actual) {
        assertThat(actual)
            .as("Verify Event auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableFieldsEquals(Event expected, Event actual) {
        assertThat(actual)
            .as("Verify Event relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getEventDate())
                    .as("check eventDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getEventDate())
            )
            .satisfies(a -> assertThat(a.getMaxParticipants()).as("check maxParticipants").isEqualTo(expected.getMaxParticipants()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getImage()).as("check image").isEqualTo(expected.getImage()))
            .satisfies(a -> assertThat(a.getImageContentType()).as("check image contenty type").isEqualTo(expected.getImageContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableRelationshipsEquals(Event expected, Event actual) {
        assertThat(actual)
            .as("Verify Event relationships")
            .satisfies(a -> assertThat(a.getVenue()).as("check venue").isEqualTo(expected.getVenue()))
            .satisfies(a -> assertThat(a.getParticipants()).as("check participants").isEqualTo(expected.getParticipants()));
    }
}
