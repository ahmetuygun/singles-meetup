package com.meet.singles.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TestQuestionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestQuestionAllPropertiesEquals(TestQuestion expected, TestQuestion actual) {
        assertTestQuestionAutoGeneratedPropertiesEquals(expected, actual);
        assertTestQuestionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestQuestionAllUpdatablePropertiesEquals(TestQuestion expected, TestQuestion actual) {
        assertTestQuestionUpdatableFieldsEquals(expected, actual);
        assertTestQuestionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestQuestionAutoGeneratedPropertiesEquals(TestQuestion expected, TestQuestion actual) {
        assertThat(actual)
            .as("Verify TestQuestion auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestQuestionUpdatableFieldsEquals(TestQuestion expected, TestQuestion actual) {
        assertThat(actual)
            .as("Verify TestQuestion relevant properties")
            .satisfies(a -> assertThat(a.getQuestionText()).as("check questionText").isEqualTo(expected.getQuestionText()))
            .satisfies(a -> assertThat(a.getQuestionType()).as("check questionType").isEqualTo(expected.getQuestionType()))
            .satisfies(a -> assertThat(a.getStepNumber()).as("check stepNumber").isEqualTo(expected.getStepNumber()))
            .satisfies(a -> assertThat(a.getIsRequired()).as("check isRequired").isEqualTo(expected.getIsRequired()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getLanguage()).as("check language").isEqualTo(expected.getLanguage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestQuestionUpdatableRelationshipsEquals(TestQuestion expected, TestQuestion actual) {
        // empty method
    }
}
