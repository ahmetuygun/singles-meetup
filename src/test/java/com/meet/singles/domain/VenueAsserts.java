package com.meet.singles.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VenueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAllPropertiesEquals(Venue expected, Venue actual) {
        assertVenueAutoGeneratedPropertiesEquals(expected, actual);
        assertVenueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAllUpdatablePropertiesEquals(Venue expected, Venue actual) {
        assertVenueUpdatableFieldsEquals(expected, actual);
        assertVenueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAutoGeneratedPropertiesEquals(Venue expected, Venue actual) {
        assertThat(actual)
            .as("Verify Venue auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueUpdatableFieldsEquals(Venue expected, Venue actual) {
        assertThat(actual)
            .as("Verify Venue relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getCapacity()).as("check capacity").isEqualTo(expected.getCapacity()))
            .satisfies(a -> assertThat(a.getContactInfo()).as("check contactInfo").isEqualTo(expected.getContactInfo()))
            .satisfies(a -> assertThat(a.getPhotoUrl()).as("check photoUrl").isEqualTo(expected.getPhotoUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueUpdatableRelationshipsEquals(Venue expected, Venue actual) {
        // empty method
    }
}
