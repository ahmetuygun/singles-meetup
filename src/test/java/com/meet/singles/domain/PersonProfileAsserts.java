package com.meet.singles.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PersonProfileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonProfileAllPropertiesEquals(PersonProfile expected, PersonProfile actual) {
        assertPersonProfileAutoGeneratedPropertiesEquals(expected, actual);
        assertPersonProfileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonProfileAllUpdatablePropertiesEquals(PersonProfile expected, PersonProfile actual) {
        assertPersonProfileUpdatableFieldsEquals(expected, actual);
        assertPersonProfileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonProfileAutoGeneratedPropertiesEquals(PersonProfile expected, PersonProfile actual) {
        assertThat(actual)
            .as("Verify PersonProfile auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonProfileUpdatableFieldsEquals(PersonProfile expected, PersonProfile actual) {
        assertThat(actual)
            .as("Verify PersonProfile relevant properties")
            .satisfies(a -> assertThat(a.getFirstName()).as("check firstName").isEqualTo(expected.getFirstName()))
            .satisfies(a -> assertThat(a.getLastName()).as("check lastName").isEqualTo(expected.getLastName()))
            .satisfies(a -> assertThat(a.getDob()).as("check dob").isEqualTo(expected.getDob()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getBio()).as("check bio").isEqualTo(expected.getBio()))
            .satisfies(a -> assertThat(a.getInterests()).as("check interests").isEqualTo(expected.getInterests()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonProfileUpdatableRelationshipsEquals(PersonProfile expected, PersonProfile actual) {
        assertThat(actual)
            .as("Verify PersonProfile relationships")
            .satisfies(a -> assertThat(a.getEvents()).as("check events").isEqualTo(expected.getEvents()));
    }
}
